# class MovieListView(generics.ListAPIView):
#     """Вывод списка фильмов"""
#     serializer_class = MovieListSerializer
#     filter_backends = (DjangoFilterBackend,)
#     filterset_class = MovieFilter
#     permission_classes = [permissions.IsAuthenticated]
#
#     def get_queryset(self):
#         movies = Movie.objects.filter(draft=False).annotate(
#             rating_user=models.Count("ratings",
#                                      filter=models.Q(ratings__ip=get_client_ip(self.request)))
#         ).annotate(
#             middle_star=models.Sum(models.F('ratings__star')) / models.Count(models.F('ratings'))
#         )
#         return movies

#
# class MovieDetailView(generics.RetrieveAPIView):
#     """Вывод фильма"""
#     queryset = Movie.objects.filter(draft=False)
#     serializer_class = MovieDetailSerializer


# class ReviewCreateView(generics.CreateAPIView):
#     """Добавление отзыва к фильму"""
#     serializer_class = ReviewCreateSerializer


# class AddStarRatingView(generics.CreateAPIView):
#     """Добавление рейтинга фильму"""
#     serializer_class = CreateRatingSerializer
#
#     def perform_create(self, serializer):
#         serializer.save(ip=get_client_ip(self.request))


# class ActorsListView(generics.ListAPIView):
#     """Вывод списка актеров"""
#     queryset = Actor.objects.all()
#     serializer_class = ActorListSerializer
#
#
# class ActorsDetailView(generics.RetrieveAPIView):
#     """Вывод актера или режиссера"""
#     queryset = Actor.objects.all()
#     serializer_class = ActorDetailSerializer


# class AlbumView(viewsets.ModelViewSet):
#     """ CRUD альбомов автора
#     """
#     parser_classes = (parsers.MultiPartParser,)
#     serializer_class = serializers.AlbumSerializer
#     permission_classes = [IsAuthor]
#
#     def get_queryset(self):
#         user = self.request.user.id
#
#         return models.Album.objects.filter(user_id=user)
#
#     def perform_create(self, serializer):
#         user = self.request.user.id
#         models_profile = AuthUser.objects.filter(user_id=user).first()
#         serializer.save(user_id=models_profile.id)
#
#     def perform_destroy(self, instance):
#         delete_old_file(instance.cover.path)
#         instance.delete()
